// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider      = "prisma-client-js"
  output        = "../generated/client"
  binaryTargets = ["native", "linux-musl-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int       @id @default(autoincrement())
  email     String    @unique
  password  String
  role      String    @default("user")
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime? // ✅ Soft delete

  // Relations
  friends     Friend[]     @relation("UserFriends")
  friend      Friend[]     @relation("FriendUser")
  userStats   UserStats?
  userEvents  UserEvent[]
  gameResults GameResult[]
}

model Friend {
  id        Int       @id @default(autoincrement())
  userId    Int
  friendId  Int
  status    String    @default("pending") // "pending", "accepted", "rejected"
  createdAt DateTime  @default(now())
  deletedAt DateTime? // ✅ Soft delete

  // Relations
  user   User @relation("UserFriends", fields: [userId], references: [id])
  friend User @relation("FriendUser", fields: [friendId], references: [id])

  @@unique([userId, friendId]) // ✅ Évite les doublons
}

model UserStats {
  id           Int       @id @default(autoincrement())
  userId       Int       @unique
  xp           Int       @default(0)
  level        Int       @default(1)
  streak       Int       @default(0)
  lastPlayedAt DateTime?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  user User @relation(fields: [userId], references: [id])
}

model UserEvent {
  id        Int      @id @default(autoincrement())
  userId    Int
  type      String // "level_up", "streak_bonus", "game_completed"
  details   String? // Informations additionnelles
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id])
}

model GameResult {
  id        Int       @id @default(autoincrement())
  userId    Int
  gameId    Int
  score     Int
  xpGained  Int       @default(0) // XP gagné lors de cette partie
  status    String // "passed" ou "failed"
  date      DateTime  @default(now())
  deletedAt DateTime? // ✅ Soft delete

  // Relations
  user User @relation(fields: [userId], references: [id])
  game Game @relation(fields: [gameId], references: [id])

  @@index([score]) // ✅ Index pour accélérer les classements
  @@index([date]) // ✅ Index pour accélérer les filtres par période
}

model Game {
  id             Int          @id @default(autoincrement())
  name           String
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  deletedAt      DateTime? // ✅ Soft delete
  gameCategoryId Int
  gameCategory   GameCategory @relation(fields: [gameCategoryId], references: [id])

  results GameResult[]
}

model GameCategory {
  id        Int       @id @default(autoincrement())
  name      String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime? // ✅ Soft delete

  games Game[]
}
